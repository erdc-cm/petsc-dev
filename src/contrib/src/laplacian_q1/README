Contents of this directory:
   Code for the parallel solution of the Partial Differential Equation
	Laplacian u = f
  in a quadrilateral two dimensional isoparametric grid, with boundary conditions
	u = bc (on the boundary).
  The solution technique is by the finite element method, using bilinear elements.
	
Usage:
    generate the grid using input
    solve the equation using main 
    view the solution in matlab using bscript.m

example of use:
    generate the grid using (for example):
	input -xintervals 9 -yintervals 9 -xmin 0.0 -xmax 1.0 -ymin 0.0 -ymax 1.0
    output is gridfile.
	mv gridfile gr99
    open up a matlab window and type
	bscript
    then call	    
	main -f gr99 -matlab_graphics
    

Grid Generator:
	input
	compile with make input
	run as:
	input -xintervals 9 -yintervals 9 -xmin 0.0 -xmax 1.0 -ymin 0.0 -ymax 1.0

Matlab Script:	
	bscript.m
	  -matlab script for viewing the solution.
	  Usage:  
		Run matlab in the same directory as the solver,
		type: bscript

Laplacian Solver:
  Usage:	
	run in parallel using	
	mpirun -np 2 main -f gr99 -matlab_graphics

   Contents
	main.c
	  -main part of the code.

	functions.c
	  -function definitions for the boundary conditions and right hand side of the pde

	appload.c
	  - get the information from the grid file using database calls.  Sets up the local data.

	appcreate.c
	  - creates the matrix and vector data structures.

	appsetalg.c
	  - loops over local elements to compute the stiffness matrix, and rhs
	appintegrator.c
	  - does the intergration over each element for the stiffness matrix, and the rhs
	appsetref.c
	  - sets up the quadrature points and the test functions on the reference grid.
	  - computes the values of the test functions on the local grid.

	appview.c
	  -utility for viewing the solution.  Connects to matlab using the matlab script, bscript.m


The basic philosophy of the codes is to make data-structures and computations cell-oriented.
The boundary conditions are one exception, and the flavor of the code which for applying boundary conditions is consequenctly very different.  For clarity, the boundary code is kept separate from the rest of the code.

full options:
   -show_matrix  -draw_pause -1
   -show_is 
   -show_ao 
   -matlab_graphics

    -help   for full description of the run-time options available.
