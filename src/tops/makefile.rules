

LANGUAGES =  c++

CFLAGS = ${BABEL_INCLUDE} 

SIDLFILES = ${PETSC_DIR}/src/tops/tops.sidl ${SIDL}

parse-check:
	${BABEL} -R${CCA_REPO} --parse-check ${SIDLFILES}

#-------------------------------------------------------------------------------
clients: 
	-@for LANGUAGE in $(LANGUAGES); do \
		echo -e "\n### Building $$LANGUAGE client library."; \
		${BABEL} -R${CCA_REPO} --suppress-timestamp -c $$LANGUAGE -o ./client/$$LANGUAGE ${SIDLFILES} ; \
		echo "include ${PETSC_DIR}/src/tops/makefile.rules" > client/$$LANGUAGE/makefile; \
		$(OMAKE) -C client/$$LANGUAGE LANGUAGE=$$LANGUAGE libtopsclient-$$LANGUAGE;\
	done
	touch $@

libtopsclient-c: 
	-@${C_CC} -c ${HAVE_CCA} ${C_CC_FLAGS} ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS}  *.c
	-@$(OMAKE)  LIBNAME=libtopsclient-${LANGUAGE} SHARED_LIBRARY_TMPDIR=. OTHERSHAREDLIBS="${BABEL_LIB} ${SL_LINKER_LIBS} ${SYS_LIB}" shared_arch

libtopsclient-c++:
	-@${CC} -c ${HAVE_CCA} ${CC_FLAGS} ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS}  *.cc
	-@$(OMAKE)  LIBNAME=libtopsclient-${LANGUAGE} SHARED_LIBRARY_TMPDIR=. OTHERSHAREDLIBS="${BABEL_LIB} ${SL_LINKER_LIBS} ${SYS_LIB}" shared_arch


libtopsclient-python: 
	-@python setup.py --include-dirs=${BABEL_INCLUDE} --include-dirs=${BABEL_INCLUDE}/python2.4/babel --library-dirs=${BABEL_LIB_DIR}  install   --install-purelib=./ --install-platlib=./ --install-headers=include --install-scripts=scripts --install-data=data

#-------------------------------------------------------------------------------
server-c++:  server/c++/obj/makefile 
	-@cd server/c++/obj; make TLIBNAME=${TLIBNAME} libserver-c++.${SOSUFFIX}

server/c++/obj/makefile: ${SIDLFILES}
	-@if [ ! -d "server/c++/obj" ]; then mkdir -p server/c++/obj; fi
	-@${BK} edit server/c++/*_Impl.cc server/c++/*_Impl.hh
	-${BABEL} -R ${CCA_REPO} --hide-glue --exclude-external --suppress-timestamp \
		${SIDLEXCLUDE} --server=c++ --output-directory=./server/c++ ${SIDLFILES}
	@-${RM} ${REMOVEFILES} server/c++/obj/makefile
	@-if [ ! -z "${TOPSCLIENT_LIB}" ]; then echo "TOPSCLIENT_LIB = ${TOPSCLIENT_LIB}" > server/c++/obj/makefile; fi
	@-echo "include ${PETSC_DIR}/src/tops/makefile.rules" >> server/c++/obj/makefile

libserver-c++.${SOSUFFIX}: 
	@-${CC} -c ${HAVE_CCA} ${CC_FLAGS} ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} -Iglue -I../glue -I.. \
	    -I${PETSC_DIR}/src/tops/client/c++ -I${PETSC_DIR}/src/tops/server/c++ \
	    ../*.cc ../glue/*.cc
	@-${C_CC} -c ${HAVE_CCA} ${C_CC_FLAGS} ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} -I../glue -I.. \
	    -I${PETSC_DIR}/src/tops/client/c++ -I${PETSC_DIR}/src/tops/server/c++ ../glue/*.c
	-@$(OMAKE) LIBNAME=${TLIBNAME} SHARED_LIBRARY_TMPDIR=. OTHERSHAREDLIBS="${PETSC_LIB} ${BABEL_LIB} ${SL_LINKER_LIBS} ${SYS_LIB} ${CC_LINKER_SLFLAG}${PETSC_LIB_DIR} ${TOPSCLIENT_LIB}" shared_arch
	-@if [ ! -d "${PETSC_LIB_DIR}/cca" ]; then mkdir ${PETSC_LIB_DIR}/cca; fi
	-@for i in StructuredSolver UnstructuredSolver ; do \
	   ${PETSC_DIR}/src/tops/utils/genSCLCCA.sh cca ${PETSC_LIB_DIR}/libtops.${SL_LINKER_SUFFIX} \
		TOPS.$$i c++ dynamic global now TOPS.$$i > $$i.cca.in; \
	   sed -e /"@PETSC_LIB_DIR@/ s|@PETSC_LIB_DIR@|${PETSC_LIB_DIR}|" \
	       $$i.cca.in >  ${PETSC_LIB_DIR}/cca/$$i.cca; rm $$i.cca.in; \
	done;
#-------------------------------------------------------------------------------

ifeq ($(EXNUM),)
  EXNUM=1
endif
cca: 
	# Generating *.cca files for ex${EXNUM}
	-@${PETSC_DIR}/src/tops/utils/genSCLCCA.sh cca ${PETSC_LIB_DIR}/libex${EXNUM}.${SL_LINKER_SUFFIX} \
		Ex${EXNUM}.System c++ dynamic global now Ex${EXNUM}.System > libex${EXNUM}.${SL_LINKER_SUFFIX}.cca.in
	-@if [ ! -d "${PETSC_LIB_DIR}/cca" ]; then mkdir ${PETSC_LIB_DIR}/cca; fi
	-@sed -e /"@PETSC_LIB_DIR@/ s|@PETSC_LIB_DIR@|${PETSC_LIB_DIR}|" \
	    	-e /"@SOSUFFIX@/ s|@SOSUFFIX@|${SL_LINKER_SUFFIX}|" \
		libex${EXNUM}.${SL_LINKER_SUFFIX}.cca.in > ${PETSC_LIB_DIR}/cca/libex${EXNUM}.${SL_LINKER_SUFFIX}.cca
	@-${RM} *.cca.in
	# Creating simple Ccaffeine script
	-@sed -e /"@PETSC_LIB_DIR@/ s|@PETSC_LIB_DIR@|${PETSC_LIB_DIR}|" ex${EXNUM}_rc.in > ex${EXNUM}_rc
	-@sed -e /"@PETSC_LIB_DIR@/ s|@PETSC_LIB_DIR@|${PETSC_LIB_DIR}|" ex${EXNUM}_gui_rc.in > ex${EXNUM}_gui_rc

test-cca: cca
	# Testing component example ex${EXNUM} with Ccaffeine
	@${CCAFE_HOME}/bin/ccafe-single --ccafe-rc ex${EXNUM}_rc > ex${EXNUM}_rc.log  2>&1 ; 
	@if [ "`egrep \"(specific|1 .+norm)\" ex${EXNUM}_rc.log | wc -l`" -ge "2" ]; then \
	  echo "=== ex${EXNUM}: Component test succeeded (see ex${EXNUM}_rc.log)."; \
	else \
          echo "*** ex${EXNUM}: Component test failed (see ex${EXNUM}_rc.log)."; \
        fi

gui-cca: cca
	# Running component example ex${EXNUM} using Ccaffeine GUI (the output is in pOut0/pErr0)
	@${CCAFE_HOME}/bin/gui-backend.sh --port 4242 --ccafe-rc \
		ex${EXNUM}_gui_rc > .ccafe.out 2>&1 & \
	echo -e "\nPlease wait...\n"; sleep 5; \
	${CCAFE_HOME}/bin/gui.sh --port 4242 # --scaleFont 1.5

kill-gui:
	# Cleaning up after GUI 
	@-${CCAFE_HOME}/bin/gui.sh --kill; ${CCAFE_HOME}/bin/gui-backend.sh --kill

#-------------------------------------------------------------------------------

examples: 
	-@for dir in `ls -d examples/c++/ex*`; do \
	  echo -e "\n### Building and testing in $$dir"; \
	  make -C $$dir server-c++ test-cca; \
	done

clean-cca:
	-@${RM} -r server/c++/obj server/c++/glue \
		examples/c++/ex?/server/c++/obj examples/c++/ex?/server/c++/glue
#-------------------------------------------------------------------------------


include ${PETSC_DIR}/bmake/common/base
include ${PETSC_DIR}/bmake/common/test


.PHONY: examples
