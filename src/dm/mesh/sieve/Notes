I. Need to create a list of 'unit tests' -- cases that MUST be handled by any Sieve interface.
   These should probably be documented with pictures and all, and done as a Tech Report. 
   This way we can test the feasibility of any design changes against this list.
   We should put common test components in a namespace so that we can build more complicated
   tests on top of simpler ones. When a test is completed, it is added to the line in parentheses.

   Sifter:
   -------
   - Performance stress tests
     - Many cone/supports (sifter1)
   Sieve:
   -------
   - Memory stress tests
     - Largest cell-vertex mesh
     - Largest full 2D and 3D, tet and hex meshes
   - Performance stress tests
     - Many closure/stars
     - Many meet/joins
   - Distribution via Overlap/Fusion
   - Global numbering of points
   - Stratification (topology1)
   Mesh (Topology + Coordinates):
   ------------------------------
   - Reading other mesh formats
     - PCICE
     - PyLith
     - VTK?
   - Interpolation of missing elements
     - Tet and hex meshes
   - Calculation of a mesh partition
     - With and without intermediate elements
   - Independent mesh point insertion on different procs
     - Collision resolution via Overlap/Fusion
   - Ordered data retrieval, or restrict
     - Element Geometry Computation (mesh1 only for P1 w/o interpolation)
   Section:
   --------
   - Data preallocation
     - Linear and cubic Lagrange (section1)
   - Raw pointer extraction
     - Linear and cubic Lagrange (section1)
   - Ordered data retrieval, or restrict
     - Linear and cubic Lagrange (section1)
   - Performance stress tests
     - Many getIndex
     - Many restrict/update
   - Memory stress tests
     - Largest linear and cubic Lagrange fields
     - Shared indices
   - Distribution via Overlap/Fusion
   - Multicomponent fields.
   - Faults a la Pylith via a suitable chart mechanism.
   - Global numbering of dofs

II. Coding guidelines

  - Mark EVERYTHING const that can be
  - Try to make Obj<> returns references to prevent extra creations
  - Have a format for each class:

    - public typedefs
    - protected data
    - public constructor/destructor
    - public data accessors
    - public/private methods
