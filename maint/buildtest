#! /usr/bin/env tcsh
# 
# Compiles and tests PETSc in our nightly builds.
# Run as buildtest ARCH where ARCH is one of the default PETSc archs
# of a configure arch
#
# Example usage: ${PETSC_DIR}/maint/buildtest solaris
#                ./maint/buildtest solaris
#                ./maint/buildtest 
#
set day=`date | cut -f1 -d" "`
#
set nPETSC_DIR=`pwd`
if ( ! -f ${nPETSC_DIR}/include/petsc.h ) then
  set maintdir=`dirname $0`
  set nPETSC_DIR=`dirname $maintdir`
  if ( ( ${nPETSC_DIR} !~ /*) || (! -f ${nPETSC_DIR}/include/petsc.h )) then
    if (${?PETSC_DIR}) then 
      set nPETSC_DIR=${PETSC_DIR}
      if ( ! -f ${nPETSC_DIR}/include/petsc.h ) then
        echo "Unable to locate PETSc directory, run with full path or in PETSc directory"
        exit
      endif
    else
      echo "Unable to locate PETSc directory, run with full path or in PETSc directory"
      exit
    endif
  endif
endif

if (${#argv} > 0) then 
  set ARCH=${1}
else
  set ARCH=`${nPETSC_DIR}/bin/configarch`
endif
if (${#argv} > 1) then 
  set CONFIGURE_ARGS="${argv[2-]}"
else 
  set CONFIGURE_ARGS=""
endif

set MACH=`hostname`
rm -f $nPETSC_DIR/test.log
rm -f $nPETSC_DIR/buildout.tar
echo "Build on $MACH $ARCH  `date` " > $nPETSC_DIR/test.log

cd $nPETSC_DIR
bk -r unedit
bk pull -q >>& $nPETSC_DIR/test.log
pushd python/BuildSystem
bk -r unedit
bk pull -q >>& $nPETSC_DIR/test.log
popd

set DATAFILESPATH=/home/petsc/datafiles
set NICE=''
set TEST='testexamples_'
# possibly overwrite the values above
if (${#argv} >= 1 && -f ${nPETSC_DIR}/config/${ARCH}) then
  source ${nPETSC_DIR}/config/${ARCH}
endif

setenv PETSC_DIR $nPETSC_DIR
set PETSC_ARCH=${ARCH}
set CONFIGURE='yes'
set CONFIGURE_FILE=$PETSC_ARCH
endif
echo "Performing buildtest on " $MACH "with arch " $PETSC_ARCH " at " $nPETSC_DIR


# Run Configure
  #remove old logs
  /bin/rm -f configure.log*
  #remove external packages - so they get rebuilt again
  /bin/rm -rf externalpackages
  # now configure
  ./config/${CONFIGURE_FILE}.py --with-no-output -PETSC_ARCH=$PETSC_ARCH -PETSC_DIR=$nPETSC_DIR ${CONFIGURE_ARGS} >>& test.log
  echo '****************************************************' >>& $nPETSC_DIR/test.log
  set EJOBS=`cat $nPETSC_DIR/bmake/$PETSC_ARCH/ejobs`
  set JOBS=`cat $nPETSC_DIR/bmake/$PETSC_ARCH/jobs`
  set RJOBS=`cat $nPETSC_DIR/bmake/$PETSC_ARCH/rjobs`
  tar cf buildoutput.tar configure.log bmake/$PETSC_ARCH/*

make PETSC_ARCH=$PETSC_ARCH PETSC_DIR=$nPETSC_DIR allfortranstubs >>& $nPETSC_DIR/test.log

egrep '^#define PETSC_HAVE_COMPLEX' $nPETSC_DIR/bmake/$PETSC_ARCH/petscconf.h  > /dev/null
if ("$?" == "0") then
  set EJOBS=""
  set RJOBS=""
endif

make PETSC_ARCH=$PETSC_ARCH PETSC_DIR=$nPETSC_DIR  all test >>& test.log
echo '****************************************************' >>& test.log
echo "Finished Build on $MACH $PETSC_ARCH `date`" >>& test.log
tar rf buildoutput.tar test.log
#
#
# Run examples
rm -f examples.log
echo "Build on $MACH $PETSC_ARCH  `date` " > examples.log
foreach j ($JOBS $EJOBS $RJOBS)
  $NICE make PETSC_ARCH=$PETSC_ARCH PETSC_DIR=$nPETSC_DIR  ACTION=$TEST$j DATAFILESPATH=$DATAFILESPATH tree |& grep -v 'up to date' >>& examples.log
  echo '******************************************************' >>& $nPETSC_DIR/examples.log
end

set GCOV=`grep PETSC_USE_GCOV $nPETSC_DIR/bmake/$PETSC_ARCH/petscconf.h`
if ( "${GCOV}" != "" ) then
  $NICE make PETSC_ARCH=$PETSC_ARCH PETSC_DIR=$nPETSC_DIR allgcov  >>& examples.log
  tar -cfz gcov.tar.gz /tmp/gcov
endif

echo "Finished Build on $MACH $PETSC_ARCH `date`" >>& $nPETSC_DIR/examples.log
echo 'X******************************************************X' >>& $nPETSC_DIR/examples.log
tar rf buildoutput.tar examples.log


