#
FCONF    = @FORTRAN_NAMING@
CONF     = -DPETSC_HAVE_PETSCCONF_H $(FCONF) 

libc: $(LIBNAME)($(OBJSC) $(SOBJSC))
libf: $(LIBNAME)($(OBJSF))

#############

#.F.o: 
#	$(FC)  -c $(FFLAGS)  $(FOPTFLAGS) $(CPPFLAGS) $*.F
#.F.a: 
#	$(FC)  -c $(FFLAGS)  $(FOPTFLAGS) $(CPPFLAGS) $*.F
#	$(AR) clr $(LIBNAME) $*.o
#	$(RM) $*.o
#
#   These are alternative rules for Fortran compilers that 
#  do not understand the .F suffix
#
#   Note: it is not possible to use the NAG F90 compiler with 
#  PETSc and a Fortran main problem. This is because the NAG
#  compiler actually generates a C main program while MPICH and
#  PETSc naturally expect the command line arguments to be 
#  handled in the Fortran manner, so MPICH crashes on initializing
#  the command line arguments.
#
#.F.o:
#	-$(RM) $*.f
#	-cpp $(CFLAGS) $< | grep -v '^ *#' > $*.f
#	-$(FC) -c $(FFLAGS) $(FOPTFLAGS) $*.f
#	-$(RM) $*.f
#.F.a:
#	-$(RM) $*.f
#	-cpp $(CFLAGS)  $< | grep -v '^ *#' > $*.f
#	-$(FC) -c $(FFLAGS) $(FOPTFLAGS) $*.f
#	-$(AR) cr $(LIBNAME) $*.o
#	-$(RM) $*.o	$*.f


#SLSUFFIX = so.1.0 
shared: chkopts_basic
	-@echo making shared libraries in ${INSTALL_LIB_DIR}; \
	cd ${INSTALL_LIB_DIR}; \
	${RM} -rf tmp; \
	mkdir tmp; \
	cd tmp; \
	for LIBNAME in ${SHLIBS}; \
	do \
	  if test -n "${LIBTOOL}"; then \
	    ${AR} x ../lt_$$LIBNAME.${LIB_SUFFIX}; \
	    ${LIBTOOL} --mode=link @CC@ ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} ${LDFLAGS} -rpath ${INSTALL_LIB_DIR} -o $$LIBNAME.la *.lo; \
	    ${LIBTOOL} --mode=install ${PETSC_DIR}/config/install-sh $$LIBNAME.la ${INSTALL_LIB_DIR}; \
	  else \
	    ${AR} x ../$$LIBNAME.${LIB_SUFFIX}; \
	    @CC@ ${COPTFLAGS} -fPIC -shared  *.o -o ../$$LIBNAME.${SLSUFFIX}; \
	  fi; \
	  ${RM} -f *; \
	done; \
	cd ../; \
	${RM} -rf tmp
